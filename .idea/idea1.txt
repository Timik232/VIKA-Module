import torch
import torch.nn as nn
import torch.nn.functional as F

class TextNeuralNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super(TextNeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.fc2 = nn.Linear(hidden_size, num_classes)
        
    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

model = TextNeuralNetwork(input_size=vocab_size, hidden_size=128, num_classes=num_classes)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

for epoch in range(num_epochs):
    running_loss = 0.0
    for i, data in enumerate(train_loader, 0):
        inputs, labels = data
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
        
    print('Epoch {} loss: {:.4f}'.format(epoch + 1, running_loss / len(train_loader)))
